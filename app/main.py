import os
import json
import atexit
import asyncio
import logging
import aioschedule as schedule
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message
from datetime import datetime, UTC, timedelta
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO)

load_dotenv()  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
# –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
TOKEN = os.getenv("TOKEN")
REMINDER_INTERVAL = int(os.getenv("REMINDER_INTERVAL"))
REMINDER_CHAT_ID = os.getenv("REMINDER_CHAT_ID")
STATUS_CHAT_ID = os.getenv("STATUS_CHAT_ID")
BD_HOST = os.getenv("BD_HOST")

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
active_tickets = {}
scheduled_jobs = {}


def now_utc3() -> datetime:
    return datetime.now(UTC) + timedelta(hours=3)


# --- –°–µ—Ä–≤–∏—Å—ã ---------------------------------------------------------

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
def load_tickets():
    global active_tickets
    try:
        with open(BD_HOST, "r") as file:
            active_tickets = json.load(file)
        logging.info(f" === APP_LOG: Loaded Tickets ‚Äî successful: {active_tickets}")

    except FileNotFoundError:
        active_tickets = {}
        logging.info(" === APP_LOG: No tickets file found. Starting fresh.")


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –≤ —Ñ–∞–π–ª
def save_tickets():
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∑–∞–ø–∏—Å–∏
        with open(BD_HOST, "w", encoding="utf-8") as file:
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
            json.dump(active_tickets, file, indent=4, ensure_ascii=False)
        logging.info(" === APP_LOG: Tickets saved successfully.")
    except Exception as e:
        logging.error(f" === APP_LOG: Error saving tickets: {e}")


# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
def load_scheduler_jobs():
    for ticket_number in active_tickets:
        logging.info(f" === APP_LOG: Scheduler Job for ticket {ticket_number} restored.")
        schedule_reminder(ticket_number)
        logging.info(f" === APP_LOG: Loaded Scheduler Jobs ‚Äî successful")


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
def schedule_reminder(ticket_number):
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
    scheduled_jobs[ticket_number] = schedule.every(REMINDER_INTERVAL).seconds.do(
        lambda: asyncio.create_task(send_reminder(ticket_number))
    )
    logging.info(f" === APP_LOG: Scheduler Job for ticket \"{ticket_number}\" created.")


# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def remove_reminder(ticket_number):
    job = scheduled_jobs.pop(ticket_number, None)
    if job:
        schedule.cancel_job(job)
        logging.info(f" === APP_LOG: Scheduler Job for ticket \"{ticket_number}\" removed.")
    else:
        logging.warning(f" === APP_LOG: Scheduler Job for ticket \"{ticket_number}\" not found.")


# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(ticket_number: str):
    try:
        logging.info(f" === APP_LOG: send_reminder called for ticket {ticket_number}")
        ticket = active_tickets.get(ticket_number)
        if ticket:
            ticket["remind_times"] += 1
            start_time = datetime.strptime(ticket["start_time"], '%H:%M %d.%m.%Y')
            elapsed_time = datetime.now() - timedelta(hours=3) - start_time  # –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            elapsed_minutes = elapsed_time.total_seconds() // 60  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –º–∏–Ω—É—Ç—ã

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await bot.send_message(
                chat_id=REMINDER_CHAT_ID,
                text=f"{ticket_number} –ø—Ä–æ—à–ª–æ {int(elapsed_minutes)} –º–∏–Ω."
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            ticket["notification_messages"].append(sent_message.message_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
            active_tickets[ticket_number] = ticket
            save_tickets()

            logging.info(f" === APP_LOG: Reminder sent for ticket {ticket_number}")
    except Exception as e:
        logging.error(f" === APP_LOG: Error in send_reminder for ticket {ticket_number}: {e}")


def date_time_formatter(start_time: str) -> str:
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
        start_time_obj = datetime.strptime(start_time, '%H:%M %d.%m.%Y')
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º "‚Äî"
        formatted_start_time = start_time_obj.strftime('%H:%M ‚Äî %d.%m.%Y')
        return formatted_start_time
    except Exception as e:
        logging.error(f" === APP_LOG: Error in date_time_formater: {e}")
        return start_time  # –í–æ–∑–≤—Ä–∞—Ç –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---------------------------------------------------------
@router.message()
async def handle_message(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
    if message.chat.type in ["group", "supergroup"]:
        logging.info(f" === APP_LOG: Message received from the group: {message.chat.title} | {message.text}")

        now = now_utc3().strftime('%H:%M %d.%m.%Y')
        chat_id = message.chat.id
        topic_id = message.message_thread_id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if message.text:
            message_text = message.text.lower()
        else:
            logging.warning("Received a message without text.")
            return

        # –û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É
        if message_text == "+":
            if message.reply_to_message is None:
                logging.warning("'+' command was used without reply")
                return

            ticket_number = message.reply_to_message.caption

            chat_id = message.reply_to_message.chat.id
            topic_id = message.reply_to_message.message_thread_id

            if ticket_number in active_tickets:
                logging.warning(f"Ticket {ticket_number} already exists.")
                await message.reply(f"Ticket {ticket_number} already exists.")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É –°—Ç–∞—Ç—É—Å
                opens_message_id = await bot.send_message(
                    chat_id=STATUS_CHAT_ID,
                    text=f"{ticket_number}\nüì• –æ—Ç–∫—Ä—ã—Ç –≤ {date_time_formatter(now)}"
                )

                active_tickets[ticket_number] = {
                    "start_time": now,
                    "chat_id": chat_id,
                    "message_thread_id": topic_id,
                    "message_id": message.message_id,
                    "opens_message_id": opens_message_id.message_id,
                    "remind_times": 0,
                    "notification_messages": []
                }
                save_tickets()
                schedule_reminder(ticket_number)

            try:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å +
                await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                logging.info(f" === APP_LOG: Message for ticket {ticket_number} deleted.")
            except Exception as e:
                logging.error(f"Failed to delete message for ticket {ticket_number}: {e}")

        elif message_text == "-":
            logging.info('deleting method was used')

            if message.reply_to_message is None:
                logging.warning("'-' command was used without reply")
                return

            ticket_number = message.reply_to_message.caption

            logging.info(
                f" === APP_LOG: {now_utc3().strftime('%H:%M %d.%m.%Y')}: topic_id={message.message_thread_id} Method=\"- \"")

            if ticket_number in active_tickets:
                ticket = active_tickets[ticket_number]

                try:
                    await bot.delete_message(chat_id=ticket["chat_id"], message_id=message.reply_to_message.message_id)
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å -
                    await bot.delete_message(chat_id=ticket["chat_id"], message_id=message.message_id)
                    logging.info(f" === APP_LOG: Message for ticket {ticket_number} deleted.")
                except Exception as e:
                    logging.error(f" === APP_LOG: Failed to delete message for ticket {ticket_number}: {e}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤ —Ç–µ–º—É –°—Ç–∞—Ç—É—Å
                await bot.edit_message_text(
                    chat_id=STATUS_CHAT_ID,
                    message_id=ticket['opens_message_id'],
                    text=f"{ticket_number}\nüì• –æ—Ç–∫—Ä—ã—Ç –≤ {date_time_formatter(ticket['start_time'])}\n‚úÖ –∑–∞–∫—Ä—ã—Ç –≤ {date_time_formatter(now)}",

                )

                remove_reminder(ticket_number)  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                try:
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å -
                    await bot.delete_message(chat_id=ticket["chat_id"], message_id=ticket["message_id"])
                    logging.info(f" === APP_LOG: Message for ticket {ticket_number} deleted.")
                except Exception as e:
                    logging.error(f" === APP_LOG: Failed to delete message for ticket {ticket_number}: {e}")

                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è-–æ–ø–æ–≤–µ—â–µ–Ω–∏—è
                for msg_id in ticket.get("notification_messages", []):
                    try:
                        await bot.delete_message(chat_id=REMINDER_CHAT_ID, message_id=msg_id)
                        logging.info(f" === APP_LOG: Deleted notification message {msg_id} for ticket {ticket_number}")
                    except Exception as e:
                        logging.error(
                            f" === APP_LOG: Failed to delete notification message {msg_id} for ticket {ticket_number}: {e}")

                del active_tickets[ticket_number]  # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
                save_tickets()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                try:
                    await bot.delete_message(chat_id=ticket["chat_id"], message_id=message.reply_to_message.message_id)
                except Exception as e:
                    logging.error(f" === APP_LOG: Failed to delete message for ticket {ticket_number}: {e}")
            else:
                await message.reply(f"{ticket_number} –ù–µ –Ω–∞–π–¥–µ–Ω.")

        # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏
        elif "list" in message.text.lower():
            formatted_tickets = json.dumps(active_tickets, indent=4, ensure_ascii=False)
            await bot.send_message(
                chat_id=message.chat.id,
                text=f"<pre>{formatted_tickets}</pre>",
                parse_mode="HTML",
                message_thread_id=message.message_thread_id
            )

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ tickets.json
        elif "dump" in message.text.lower():
            try:
                with open(BD_HOST, "r", encoding="utf-8") as file:
                    file_content = json.load(file)

                formatted_content = json.dumps(file_content, indent=4, ensure_ascii=False)

                await bot.send_message(
                    chat_id=message.chat.id,
                    text=f"<pre>{formatted_content}</pre>",
                    parse_mode="HTML",
                    message_thread_id=message.message_thread_id
                )
            except FileNotFoundError:
                logging.error(" === APP_LOG: tickets.json file not found.")
            except json.JSONDecodeError as e:
                logging.error(f" === APP_LOG: Error decoding tickets.json: {e}")
            except Exception as e:
                logging.error(f" === APP_LOG: Unexpected error while reading tickets.json: {e}")

        # –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        elif "bot help" in message.text.lower():
            logging.info(f" === APP_LOG: {now_utc3().strftime('%H:%M %d.%m.%Y')}: Method \"bot help\" triggered")

            help_text = (
                "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**:\n"
                "1. **–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É:**\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ `+ `<–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏> —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.\n"
                "   _–ü—Ä–∏–º–µ—Ä: + 1234_\n\n"
                "2. **–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É:**\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ `- `<–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏> —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.\n"
                "   _–ü—Ä–∏–º–µ—Ä: - 1234_\n\n"
                "3. **–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏:**\n"
                "   –ù–∞–ø–∏—à–∏—Ç–µ `list` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.\n"
            )

            await message.reply(help_text, parse_mode="Markdown")

        # –í–µ—Ä–Ω—É—Ç—å ID —Ç–æ–ø–∏–∫–∞
        elif "tid" in message_text:
            logging.info(f" === APP_LOG: thread_id = {message.message_thread_id}")


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---------------------------------------------------------

logging.info(f" === APP_LOG: Inited Router  ‚Äî {dp.include_router(router)}")  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
load_tickets()  # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –∏–∑ –ë–î
load_scheduler_jobs()  # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏–∑ –ë–î


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def run_scheduler():
    while True:
        for job in schedule.jobs:
            if job.should_run:
                await asyncio.create_task(job.run())
        await asyncio.sleep(1)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    asyncio.create_task(run_scheduler())
    await dp.start_polling(bot)


if __name__ == "__main__":
    atexit.register(save_tickets)
    asyncio.run(main())